{"version":3,"sources":["bird.png","Timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","words","Timer","props","prev","audio","Audio","state","step","diff","current","demo","content","curr","full","active","schedule","DateTime","fromObject","minute","zone","plus","hours","target","time","this","setState","d","dobj","toObject","stepper","milliseconds","ms","getWord","Math","floor","index","length","start","lastIndexOf","end","indexOf","play","slice","toFormat","toggleDemo","className","onClick","bind","Component","ReactAnimationFrame","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de9ca9e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bird.c146bea4.png\";","import React, {Component} from 'react';\nimport ReactAnimationFrame from 'react-animation-frame';\nimport {DateTime} from 'luxon';\nimport \"./bird.png\";\n\nconst words = [\n    '▸','▸','▸','香','港','人','加','油', '.',\n    '▸','▸','▸','香','港','人','加','油', '.',\n    '▸','▸','▸','香','港','人','加','油', '.',\n    '▸','▸','▸','香','港','人','加','油', '.',\n    '▸','▸','▸','香','港','人','加','油', '.'\n    // Comment out for 自由發揮\n    // '▸','▸','光','復','香','港','時','代','革','命','.',\n    // '▸','▸','光','復','香','港','時','代','革','命','.',\n    // '▸','▸','光','復','香','港','時','代','革','命','.'\n]\n\nclass Timer extends Component {\n\n    prev = 0;\n    audio = new Audio(\"audio.mp3\");\n\n    constructor(props) {\n        super(props);\n        this.state = {step: 0, diff: null, current: null, demo: false, content: {curr: '', full: '', active: false} };\n        this.schedule = DateTime.fromObject({minute: 0, zone: 'Asia/Hong_Kong'}).plus({hours: 1});\n        this.target = this.schedule;\n        // this.target = DateTime.fromObject({zone: 'Asia/Hong_Kong'})\n      }\n\n    onAnimationFrame(time) {\n        if (time - this.prev > 100) { \n            this.prev = time;\n            let curr = DateTime.fromObject({zone: 'Asia/Hong_Kong'});\n            this.setState({\n                current: curr,\n                diff: this.target.diff( curr )\n            }, () => {\n                let d = this.state.diff ? this.state.diff : null;\n                let dobj = d ? d.toObject() : null;\n                this.stepper( -dobj.milliseconds );\n            })\n        }\n    }\n\n    stepper( ms, step=400 ) {\n        return this.getWord( Math.floor(ms/step) );\n    }\n\n    getWord( index ) {\n        if (index >= 0 && index < words.length ) {\n            let start = words.lastIndexOf( \".\", index ) + 1;\n            let end = words.indexOf( \".\", index );\n            if (index === start+3) this.audio.play();\n            this.setState({content: {\n                full: words.slice( start, end ),\n                curr: words.slice( start, index+1 ),\n                active: true\n            }});\n        } else {\n\n            if (index >= words.length ) {\n                this.schedule = DateTime.fromObject({minute: 0, zone: 'Asia/Hong_Kong'}).plus({hours: 1});\n            }\n\n            this.setState( {content: {\n                full: `各自鳩叫, ${this.schedule.toFormat(\"ha\")}再見`,\n                curr: '',\n                active: false,\n            }});\n\n            if (index > 0 && this.state.demo) {\n                this.toggleDemo();\n            }\n        }\n    }\n\n    toggleDemo() {\n        this.setState({demo: !this.state.demo}, () => {\n            this.target = this.state.demo ? DateTime.fromObject({zone: 'Asia/Hong_Kong'}) : this.schedule;\n        });\n    }\n \n    render() {\n\n        let d = this.state.diff ? this.state.diff : null;\n        let dobj = d ? d.toObject() : null;\n        \n        return (\n            <div className=\"timer\">\n                <div className=\"curr-time\">\n                    <p>{ this.state.current && !this.state.demo ? '香港時間 ' + this.state.current.toFormat( \"d/M/yyyy h:mma\" ) : '' }</p>\n                    <h2>{ d && !this.state.demo && dobj.milliseconds > 0 ? '倒數 ' + d.toFormat(\"hh:mm:ss\") : '' }</h2>\n                </div>  \n                <div className=\"banner\">{ d ? this.state.content.full : '' }</div>\n                <div className=\"banner highlight\">{ d ? this.state.content.curr : '' }</div>\n                { d && dobj.milliseconds > 0 \n                    ? <div className=\"quotation\">\n                        <strong className=\"emphasis\">全天候卡拉OK版鳩叫APP</strong>\n                        <br />\n                        讓民主自由和公義\n                        <br />\n                        傳遍香港每個角落\n                        <br />\n                        (朝八晚十，或每一小時都得。)\n                        </div>\n                    : '' }\n\n                { this.state.content.active && !this.state.demo ? '' :\n                    <div className={`demo ${this.state.demo ? 'active' : ''}`} onClick={this.toggleDemo.bind(this)}>\n                        { this.state.demo \n                            ? <div><span className=\"message\">（試用中）點用法：每一小時正，打開這WEB APP，好似卡拉OK咁一齊鳩叫！</span><span className=\"close\">OK</span></div> \n                            : <span>試用<br/>(有聲)</span>\n                        }\n                    </div>\n                }\n\n                <div className=\"img\"></div>\n\n            </div>\n        );\n    }\n}\n \nexport default ReactAnimationFrame(Timer);","import React from 'react';\nimport './App.css';\nimport Timer from './Timer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}